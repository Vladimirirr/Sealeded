// A basic webpck configuration for application (a vue2 project).
// generated by command `npx vue inspect --verbose` (`npx vue` = `node ./node_modules/@vue/cli/bin/index.js`)
/**
 * @vue/cli: 5
 * webpack: 5
 */

// 简化了的 @vue/cli project with webpack
export default {
  mode: 'development',
  context: '~/demo',
  entry: {
    app: ['./src/main.js'],
  },
  output: {
    // 指定 webpack 的散列策略，值将透传给 node.js 的 crypto.createHash
    hashFunction: 'xxhash64',
    path: '~/demo/dist',
    filename: 'js/[name].js',
    publicPath: '/',
    // 指定 non-inital chunk 的名字
    chunkFilename: 'js/[name].js',
  },
  // 配置检索模块相关的东西，从而让 webpack 更高效地检索一个模块
  resolve: {
    // 路径别名
    alias: {
      '@': '~/demo/src',
      vue$: 'vue/dist/vue.runtime.esm.js',
    },
    // 默认扩展名
    extensions: ['.mjs', '.js', '.jsx', '.vue', '.json', '.wasm'],
    // 指定 webpack 检索模块的目录
    modules: [
      'node_modules', // 特殊值，表示按照正常的 node.js 模块搜索方式，即 ['./node_modules', '../node_modules', '../../node_modules', ...]
      '~/demo/node_modules',
      '~/demo/node_modules/@vue/cli-service/node_modules',
    ],
  },
  // 与 resolve 相似，但只检索 Loader 模块
  resolveLoader: {
    modules: [
      // 包含 babel-loader thread-loader
      '~/demo/node_modules/@vue/cli-plugin-babel/node_modules',
      // 包含 vue-loader
      '~/demo/node_modules/@vue/cli-service/lib',
      'node_modules',
      '~/demo/node_modules',
      '~/demo/node_modules/@vue/cli-service/node_modules',
    ],
  },
  // vue2 webpack 项目绝大多数的配置都集中在 loaders
  module: {
    // 指定不让 webpack 检索的模块（因此，webpack 不再进入这些模块里），从而提高效率
    noParse: /^(vue|vue-router|vuex|vuex-router-sync)$/,

    // loaders 配置
    // 省略了一些对学习此 vue2 project with webpack 意义不大的 loader：
    rules: [
      /* config.module.rule('vue') */
      {
        test: /\.vue$/,
        use: [
          /* config.module.rule('vue').use('vue-loader') */
          {
            loader: 'vue-loader',
            options: {},
          },
        ],
      },
      /* config.module.rule('css') */
      {
        test: /\.css$/,
        oneOf: [
          /* config.module.rule('css').oneOf('normal-module') */
          // xxxx.module.css
          {
            test: /\.module\.\w+$/,
            use: [
              /* config.module.rule('css').oneOf('normal-module').use('vue-style-loader') */
              {
                // 针对 vue sfc 强化的 style-loader，例如，它还能处理 scoped、ssr、等特殊的 vue css 特性
                loader: 'vue-style-loader',
                options: {},
              },
              /* config.module.rule('css').oneOf('normal-module').use('css-loader') */
              {
                loader: 'css-loader',
                options: {
                  // 对 css 里的 @import 引入其他 css 时，再次 apply 前两个 loaders
                  importLoaders: 2,
                },
              },
              /* config.module.rule('css').oneOf('normal-module').use('postcss-loader') */
              {
                loader: 'postcss-loader',
                options: {},
              },
            ],
          },
          /* config.module.rule('css').oneOf('normal') */
          // xxxx.css
          {
            use: [
              /* config.module.rule('css').oneOf('normal').use('vue-style-loader') */
              {
                loader: 'vue-style-loader',
                options: {},
              },
              /* config.module.rule('css').oneOf('normal').use('css-loader') */
              {
                loader: 'css-loader',
                options: {
                  importLoaders: 2,
                },
              },
              /* config.module.rule('css').oneOf('normal').use('postcss-loader') */
              {
                loader: 'postcss-loader',
                options: {},
              },
            ],
          },
        ],
      },
      /* config.module.rule('less') */
      {
        test: /\.less$/,
        oneOf: [
          /* config.module.rule('less').oneOf('normal-module') */
          // xxxx.module.less
          {
            test: /\.module\.\w+$/,
            use: [
              /* config.module.rule('less').oneOf('normal-module').use('vue-style-loader') */
              {
                loader: 'vue-style-loader',
                options: {},
              },
              /* config.module.rule('less').oneOf('normal-module').use('css-loader') */
              {
                loader: 'css-loader',
                options: {
                  importLoaders: 2,
                },
              },
              /* config.module.rule('less').oneOf('normal-module').use('postcss-loader') */
              {
                loader: 'postcss-loader',
                options: {},
              },
              /* config.module.rule('less').oneOf('normal-module').use('less-loader') */
              {
                loader: 'less-loader',
                options: {},
              },
            ],
          },
          /* config.module.rule('less').oneOf('normal') */
          // xxxx.less
          {
            use: [
              /* config.module.rule('less').oneOf('normal').use('vue-style-loader') */
              {
                loader: 'vue-style-loader',
                options: {},
              },
              /* config.module.rule('less').oneOf('normal').use('css-loader') */
              {
                loader: 'css-loader',
                options: {
                  importLoaders: 2,
                },
              },
              /* config.module.rule('less').oneOf('normal').use('postcss-loader') */
              {
                loader: 'postcss-loader',
                options: {},
              },
              /* config.module.rule('less').oneOf('normal').use('less-loader') */
              {
                loader: 'less-loader',
                options: {},
              },
            ],
          },
        ],
      },
      /* config.module.rule('js') */
      {
        test: /\.m?jsx?$/,
        exclude: [
          function (filepath) {
            // 此函数决定传入的模块是否要被转译
            // 省略函数 shouldTranspile 具体的内容
            return shouldTranspile(filepath)
          },
        ],
        use: [
          /* config.module.rule('js').use('babel-loader') */
          {
            loader: 'babel-loader',
            options: {
              cacheDirectory: '~/demo/node_modules/.cache/babel-loader',
              cacheIdentifier: '516bdf02', // 一个 random string 当作本次缓存的标识符
            },
          },
        ],
      },
    ],
  },
  optimization: {
    // realContentHash = true 表示文件的 hash 只会根据文件内容的变化而变化，而不会根据文件的其他信息变化而变化（比如 文件名、文件修改时间、等等）
    // realContentHash = false 反之
    realContentHash: false,
    // @vue/cli 的代码分割策略
    splitChunks: {
      cacheGroups: {
        defaultVendors: {
          name: 'chunk-vendors',
          test: /[//]node_modules[//]/,
          priority: -10,
          chunks: 'initial',
        },
        common: {
          name: 'chunk-common',
          minChunks: 2,
          priority: -20,
          chunks: 'initial',
          reuseExistingChunk: true,
        },
      },
    },
    minimizer: [
      /* config.optimization.minimizer('terser') */
      new TerserPlugin(),
    ],
  },
  plugins: [
    /* config.plugin('vue-loader') */
    // vue-loader 同时包含了 vue sfc 在 webpack 下的 loader 和 plugin
    // 此插件会修改任何 vue-loader 得到的 block request，并重定向到需要的 loader rule
    new VueLoaderWebpackPlugin(),
    /* config.plugin('define') */
    new DefineWebpackPlugin({
      'process.env': {
        NODE_ENV: '"development"',
        BASE_URL: '"/"',
      },
    }),
    /* config.plugin('case-sensitive-paths') */
    new CaseSensitivePathsWebpackPlugin(),
    /* config.plugin('html') */
    new HtmlWebpackPlugin({
      title: 'demo',
      scriptLoading: 'defer',
      templateParameters: function () {
        // 载入更多的定义的环境常量
      },
      template: '~/demo/public/index.html',
    }),
    /* config.plugin('copy') */
    new CopyWebpackPlugin({
      patterns: [
        {
          from: '~/demo/public',
          to: '~/demo/dist',
          globOptions: {
            ignore: ['~/demo/public/index.html'],
          },
          info: {
            // Terser will skip this file for minimization.
            minimized: true,
          },
        },
      ],
    }),
  ],
}
